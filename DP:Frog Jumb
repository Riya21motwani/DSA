//Memoization

#include <bits/stdc++.h> 
int solve(int ind, vector<int>& height, vector<int>& dp){
    if(ind==0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    int jumpTwo = INT_MAX;
    int jumpOne= solve(ind-1, height,dp)+ abs(height[ind]-height[ind-1]);
    if(ind>1)
        jumpTwo = solve(ind-2, height,dp)+ abs(height[ind]-height[ind-2]);
    
    return dp[ind]=min(jumpOne, jumpTwo);
}

int frogJump(int n, vector<int> &heights)
{
     vector<int>dp(n,-1);
    int ans=solve(n-1,  heights,dp);
    return ans;
}




//Method2 Tabulation
#include <bits/stdc++.h> 


int frogJump(int n, vector<int> &heights)
{
    
    vector<int>dp(n+1,-1);
    int prev=0;
    int prev2=0;

    for(int i=1;i<n;i++){
        int fs=prev+abs(heights[i]-heights[i-1]);
        int ss=INT_MAX;
        if(i>1){
            ss=prev2+abs(heights[i]-heights[i-2]);
        }
       int curri=min(fs,ss);
        prev2=prev;
        prev=curri;
    }
    return prev;
}

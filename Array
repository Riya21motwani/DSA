
//To find the missing and duplicate number
//T.C=O(N) S.C=O(1)

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
           long long n = nums.size(); // size of the array

    // Find Sn and S2n:
    long long SN = (n * (n + 1)) / 2;
    long long S2N = (n * (n + 1) * (2 * n + 1)) / 6;
         long long S = 0, S2 = 0;
    for (int i = 0; i < n; i++) {
        S += nums[i];
        S2 += (long long)nums[i] * (long long)nums[i];
    }

    //S-Sn = X-Y:
    long long val1 = S - SN;

    // S2-S2n = X^2-Y^2:
    long long val2 = S2 - S2N;

    // X+Y = (X^2-Y^2)/(X-Y):
    val2 = val2 / val1;

    // X and Y: X = ((X+Y)+(X-Y))/2 and Y = X-(X-Y),
    //  X-Y = val1 and X+Y = val2:
    long long x = (val1 + val2) / 2;
    long long y = x - val1;

    return {(int)x, (int)y};
    }
};
